// redux/activitySlice.js

import { createSlice } from '@reduxjs/toolkit';
// default state object for this slice of the redux store
// each property in the object corresponds to a specific piece of state that will be managed in this slice
const initialState = {
  activity: '',
  skillLevel: '',
  allActivities: ['Golf', 'Hiking', 'Camping', 'Biking'],
  selectedA: {},
  zipcodes: [],
};
// initialize activity slice using the createSlice method that was imported above
// combines actions and reducers into one step
const activitySlice = createSlice({
  // sets the slice name to the string activity - prefix for actions generated by this type ex. activity/setActivity etc
  name: 'activity',
  // sets the starting default state for this slice using the initialState defined above
  initialState,
  // reducers property that holds an object containing methods (reducer functions) that correspond to a specific action that updates the state in response to the dispatched actions
  reducers: {
    //reducer function that takes in a current "draft" state which is mutable - properties can be directly modified in this function
    // action is the dispatched action that has a type property ex. (activity/setActivity) and a payload property on the action object
    // long story short, when activity/setActivity is called, it will have an action "type" & payload attached to it
    setActivity: (state, action) => {
      state.activity = action.payload;
    },
    // same as above
    setSkillLevel: (state, action) => {
      state.skillLevel = action.payload;
    },
    // on the action.payload there will be key value pairs of the activity and skillLevel that was selected by the user
    addActivity: (state, action) => {
      //destructured here for access within the function
      const { activity, skillLevel } = action.payload;
      // update the current state by referencing the selectedA object and creating a key value pair on the object, which acts as a storage
      state.selectedA[activity] = skillLevel;
    },
    // reference the key on the selectedA object on the State and then delete the entire key value pair
    //when this is called it should be dispatched with the activity that the user wants to remove - contained on the action.payload
    removeActivity: (state, action) => {
      delete state.selectedA[action.payload];
    },
    // updates the zipcodes array with a new array on the incoming action.payload
    setZipcodes: (state, action) => {
      state.zipcodes = action.payload;
    },
  },
});

// export, destructure the extracted action creators from each reducer so these actions can be used in other components where the actions need to be dispatched
export const {
  setActivity,
  setSkillLevel,
  addActivity,
  removeActivity,
  setZipcodes,
} = activitySlice.actions;
// exports the default activitySlice reducer function to be referenced in the Redux Store, which will handle state updates
export default activitySlice.reducer;
